# circleCIのバージョン指定
version: 2.1
jobs:
  # Djangoのテストを実行
  build:
    working_directory: ~/nyapu_project
    machine: 
      image: ubuntu-2204:2022.04.2
    steps:
      - checkout
      - run:
          name: make env file
          command: |
            echo SECRET_KEY=${SECRET_KEY} >> ./.env
            echo DATABASE_ENGINE=${DATABASE_ENGINE} >> ./.env
            echo DATABASE_DB=${DATABASE_DB} >> ./.env
            echo DATABASE_USER=${DATABASE_USER} >> ./.env
            echo DATABASE_PASSWORD=${DATABASE_PASSWORD} >> ./.env
            echo DATABASE_HOST=${DATABASE_HOST} >> ./.env
            echo DATABASE_PROT=${DATABASE_PORT} >> ./.env

            echo POSTGRES_USER=${POSTGRES_USER} >> ./.env.db
            echo POSTGRES_PASSWORD=${POSTGRES_PASSWORD} >> ./.env.db
            echo POSTGRES_DB=${POSTGRES_DB} >> ./.env.db
      - run:
          name: Install Docker Compose
          command: |
            curl -L "https://github.com/docker/compose/releases/download/1.26.0/docker-compose-$(uname -s)-$(uname -m)" -o ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose
      - run:
          name: docker-compose up
          command: docker-compose up -d --build
      - run:
          name: sleep for launch db to migrate at Django
          command: sleep 30
      - run:
          name: test
          command: docker-compose exec nyapu python /usr/src/app/nyapu/manage.py test diary accounts
      - run:
          name: docker-compose down
          command: docker-compose down

  # EC2にSSH接続し、デプロイを実行する
  deploy:
    machine:
      image: ubuntu-2204:2022.04.2
    steps:
      - checkout
      # CircleCIに登録した秘密鍵を呼び出す。
      - add_ssh_keys:
          fingerprints:
            - ${KEY_FINGERPRINT}
      - run: sudo pip install awscli           
      - run:
          name: ec2 deploy
          command: |
            set -ex

            export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
            export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
            export AWS_DEFAULT_REGION="us-west-2"

            MY_SECURITY_GROUP="sg-0dd95220d0b64b53a"
            MY_IP=`curl -f -s ifconfig.me`

            trap "aws ec2 revoke-security-group-ingress --group-id $MY_SECURITY_GROUP --protocol tcp --port 22 --cidr $MY_IP/32" 0 1 2 3 15
            aws ec2 authorize-security-group-ingress --group-id $MY_SECURITY_GROUP --protocol tcp --port 22 --cidr $MY_IP/32
            ssh ${USER_NAME}@${HOST_NAME} '
              cd ~/app/nyapu &&
              git pull origin master &&
              python3 -m pip install --upgrade pip &&
              python3 -m pipenv install --skip-lock &&
              cd ~/app/nyapu/nyapu &&
              pipenv run python3 /home/nyapu_admin/app/nyapu/nyapu/manage.py migrate &&
              pipenv run python3 /home/nyapu_admin/app/nyapu/nyapu/manage.py collectstatic --noinput &&
              pipenv run sudo systemctl reload nginx.service &&
              pipenv run pkill gunicorn &&
              pipenv run gunicorn --bind 127.0.0.1:8000 nyapu_pj.wsgi -D &&
              pipenv run ps -aux | grep gunicorn
            '

# テストが成功した場合のみ、deployを実行する。
workflows:
  version: 2.1
  build_and_deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          # masterブランチがpushされた場合のみdeployするようにする。
          filters:
            branches:
              only: master
