# circleCIのバージョン指定
version: 2.1
jobs:
  build:
    working_directory: ~/nyapu_project
    machine: 
      image: ubuntu-2204:2022.04.2
    steps:
# Djangoのテストを実行
      - checkout
      - run:
          name: make env file
          command: |
            echo SECRET_KEY=${SECRET_KEY} >> ./.env
            echo DATABASE_ENGINE=${DATABASE_ENGINE} >> ./.env
            echo DATABASE_DB=${DATABASE_DB} >> ./.env
            echo DATABASE_USER=${DATABASE_USER} >> ./.env
            echo DATABASE_PASSWORD=${DATABASE_PASSWORD} >> ./.env
            echo DATABASE_HOST=${DATABASE_HOST} >> ./.env
            echo DATABASE_PROT=${DATABASE_PORT} >> ./.env

            echo POSTGRES_USER=${POSTGRES_USER} >> ./.env.db
            echo POSTGRES_PASSWORD=${POSTGRES_PASSWORD} >> ./.env.db
            echo POSTGRES_DB=${POSTGRES_DB} >> ./.env.db
      - run:
          name: Install Docker Compose
          command: |
            curl -L "https://github.com/docker/compose/releases/download/1.26.0/docker-compose-$(uname -s)-$(uname -m)" -o ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose
      - run:
          name: docker-compose up
          command: docker-compose up -d --build
      - run:
          name: sleep for launch db to migrate at Django
          command: sleep 30
      - run:
          name: test
          command: docker-compose exec nyapu python /usr/src/app/nyapu/manage.py test diary accounts
      - run:
          name: docker-compose down
          command: docker-compose down

# EC2にSSH接続し、デプロイを実行する
# deploy:
#   machine:
#     image: circleci/classic:edge
#   steps:
#     - checkout
#     # CircleCIに登録した秘密鍵を呼び出す。
#     - add_ssh_keys:
#     - run: ssh ${USER_NAME}@${HOST_NAME} 'cd todoList && git pull && docker-compose run python ./manage.py migrate'

# テストが成功した場合のみ、deployを実行。
#workflows:
#  version: 2
#  build_and_deploy:
#    jobs:
#      - build
#      - deploy:
#          requires:
#            - build
#          # masterブランチがpushされた場合のみdeployするようにする。
#          filters:
#            branches:
#              only: master

workflows:
  build:
    jobs:
      - build

